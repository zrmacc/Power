rate1 = c(0.3, 0.7),
or = 2
)
ORbyPi(
rate1 = c(0.3, 0.8),
or = 2
)
ORbyPi(
rate1 = c(0.4, 0.7),
or = 2
)
ORbyPi(
rate1 = c(0.5, 0.5),
or = 2
)
ORbyPi(
rate1 = c(0.4, 0.5),
or = 2
)
ORbyPi(
rate1 = c(0.4, 0.6),
or = 2
)
ORbyPi(
rate1 = c(0.2, 0.8),
or = 2
)
ORbyPi(
rate1 = c(0.6, 0.8),
or = 2
)
ORbyPi(
rate1 = c(0.6, 0.9),
or = 2
)
ORbyPi(
rate1 = c(0.1, 0.9),
or = 2
)
ORbyPi(
rate1 = c(0.25, 0.60),
or = 2
)
library(ggplot2)
# Rate in arm 1 for each stratum.
rate1 <- c(0.25, 0.60)
# Common odds ratio.
or <- 2
#' Rate in Arm 2.
#'
#' @param p Rate in Arm 1.
#' @param or Odds ratio.
Rate2 <- function(p, or) {
out <- (p * or) / (1 - p + p * or)
return(out)
}
#' Marginal rate.
#'
#' @param pi Proportion in stratum 1.
#' @param rates Numeric vector of rates.
MargRate <- function(pi, rates){
out <- pi * rates[1] + (1 - pi) * rates[2]
return(out)
}
#' Odds
#'
#' @param p Proportion.
Odds <- function(p) {
out <- p / (1 - p)
return(out)
}
#' Marginal odds ratio.
#'
#' @param pi Proportion in stratum 1.
#' @param rate1 Numeric vector of rates in arm 1.
#' @param or Common odds ratio.
#' @param log.scale Logical.
MargOR <- function(pi, rate1, or, log.scale = FALSE) {
p_marg <- MargRate(pi, rate1)
q_marg <- MargRate(pi, Rate2(rate1, or))
out <- Odds(q_marg) / Odds(p_marg)
if (log.scale) {
out <- log(out)
}
return(out)
}
#' Minimum MargOR
#'
#' @param rate1 Numeric vector of rates in arm 1.
#' @param or Common odds ratio.
MinOR <- function(rate1, or) {
# Objective.
Obj <- function(pi) {
out <- MargOR(pi = pi, rate1 = rate1, or = or, log.scale = TRUE)
return(out)
}
# Minimize.
min_log_or <- optim(
par = 0.001,
fn = Obj,
method = "L-BFGS-B",
lower = 0.001,
upper = 0.999
)
# Output.
out <- c(
"pi" = as.numeric(min_log_or$par),
"or" = as.numeric(exp(min_log_or$value))
)
return(out)
}
#' Candidate Bound
#'
#' @param rate1 Numeric vector of rates in arm 1.
#' @param or Common odds ratio.
LBound <- function(rate1, or) {
h <- function(p, or) {
out <- log(Rate2(p, or)) - (1 - Rate2(p, or)) - p + log(1 - p)
return(out)
}
h_rate <- h(rate1, or)
out <- exp(2 + max(h_rate))
return(out)
}
# -----------------------------------------------------------------------------
#' Marginal OR by mixing proportion.
#'
#' @param rate1 Rates in arm 1.
#' @param or Common odds ratio.
ORbyPi <- function(rate1, or) {
# Mixing proportions.
pi <- seq(from = 0.001, to = 0.999, by = 0.0005)
marg_or <- MargOR(pi = pi, rate1 = rate1, or = or)
df <- data.frame(
x = pi,
y = marg_or
)
q <- ggplot(data = df) +
theme_bw() +
geom_line(
aes(x = x, y = y),
color = "royalblue"
) +
labs(
x = expression(pi),
y = "Marginal OR"
)
show(q)
}
ORbyPi(
rate1 = c(0.25, 0.60),
or = 2
)
# -----------------------------------------------------------------------------
# Simulation.
# -----------------------------------------------------------------------------
or <- 2
reps <- 2e3
loop <- function(i) {
rate1 <- sort(runif(2))
lower <- MinOR(rate1 = rate1, or = or)
out <- data.frame(
"p1" = rate1[1],
"p2" = rate1[2],
"mid" = mean(rate1),
"pi" = lower[1],
"marg_p" = MargRate(lower[1], rate1),
"or" = lower[2],
"lb" = LBound(rate1, or)
)
return(out)
}
set.seed(1234)
sim <- lapply(seq_len(reps), loop)
sim <- do.call(rbind, sim)
plot(density(sim$pi))
plot(sim$mid, sim$marg_p)
head(sim)
head(sim)
max(sim$pi)
min(sim$pi)
sim[sim$pi == min(sim$pi), ]
sim[sim$pi == max(sim$pi), ]
29+18
install.packages("devtools")
install.packages("RNOmni")
install.packages("SurrogateRegression")
install.packages("optparse")
install.packages("mvnfast")
install.packages("mvnfast")
devtools::install_github(repo = "zrmacc/MatrixOps")
install.packages("Rcpp")
install.packages("plyr")
# Install dependencies.
install.packages("cowplot")
install.packages("data.table")
install.packages("devtools")
install.packages("ggplot2")
install.packages("mvnfast")
install.packages("optparse")
install.packages("plyr")
install.packages("Rcpp")
install.packages("RNOmni")
install.packages("SurrogateRegression")
devtools::install_github(repo = "the-infiltrator/exactinf4meta", ref = "dev")
install.packages("devtools")
devtools::install_github(repo = "zrmacc/MCC")
install.packages("dplyr")
install.packages("dplyr")
install.packages("survival")
setwd("Documents/Lab/Projects/Recurrent Events/Replication/")
load("Results/lwyy.RData")
summary(lwyy0)
lwyy0
library(survival)
summary(lwyy0)
summary(lwyy1)
survival::bladder1
bladder1[bladder1$stop <= bladder1$start,]
bladder1[bladder1$id == 1, ]
knitr::opts_chunk$set(echo = TRUE)
load("lwyy.RData")
library(survival)
summary(survival)
summary(lwyy0)
survival::bladder1
library(survival)
setwd("~/Documents/Lab/Projects/Recurrent Events/Data")
#------------------------------------------------------------------------------
# AUC Data
#------------------------------------------------------------------------------
# Format bladder data
data <- bladder1 %>%
dplyr::filter(treatment != "pyridoxine" & stop > start) %>%
dplyr::select("id", "stop", "status", "treatment", "size", "number") %>%
dplyr::rename(idx = id, time = stop) %>%
dplyr::mutate(arm = 1 * (treatment == "thiotepa")) %>%
dplyr::select(-"treatment")
data$status[data$status > 1] <- 2
library(dplyr)
library(survival)
setwd("~/Documents/Lab/Projects/Recurrent Events/Data")
#------------------------------------------------------------------------------
# AUC Data
#------------------------------------------------------------------------------
# Format bladder data
data <- bladder1 %>%
dplyr::filter(treatment != "pyridoxine" & stop > start) %>%
dplyr::select("id", "stop", "status", "treatment", "size", "number") %>%
dplyr::rename(idx = id, time = stop) %>%
dplyr::mutate(arm = 1 * (treatment == "thiotepa")) %>%
dplyr::select(-"treatment")
data$status[data$status > 1] <- 2
#------------------------------------------------------------------------------
# AUC Data
#------------------------------------------------------------------------------
# Format bladder data
data <- bladder1 %>%
dplyr::filter(treatment != "pyridoxine" & stop > start) %>%
dplyr::select("id", "stop", "status", "treatment", "size", "number") %>%
dplyr::rename(idx = id, time = stop) %>%
dplyr::mutate(arm = 1 * (treatment == "thiotepa")) %>%
dplyr::select(-"treatment")
data$status[data$status > 1] <- 2
split_data <- split(x = data, f = data$idx)
AddBackRow <- function(df) {
n_row <- nrow(df)
last_status <- df$status[n_row]
if (last_status == 1) {
new_row <- df[n_row, ]
new_row$status <- 0
out <- rbind(df, new_row)
} else {
out <- df
}
return(out)
}
split_data <- lapply(split_data, AddBackRow)
data <- do.call(rbind, split_data)
# Ensure all subjects experienced censoring or a terminal event.
LastStatus <- function(status) {
return(status[length(status)])
}
last_status <- tapply(data$status, data$idx, LastStatus)
table(last_status)
# Output
saveRDS(object = data, file = 'bladder_data.rds')
source("../Rscripts/PlotMCF.R")
data <- readRDS(file = "../Data/bladder_data.rds")
cmp_data <- data
cmp_data$status[cmp_data$status == 2] <- 1
source("../Rscripts/PlotMCF.R")
PlotMCFs(data = data, title = )
PlotMCFs(data = data, title = "Composite Endpoint", y_lim = c(0, 2))
PlotMCFs(data = data, title = "Composite Endpoint", y_lim = c(0, 3), x_max = 60)
knitr::opts_chunk$set(
echo = FALSE,
results = "hold",
fig.align = "center"
)
load("aumcf.RData")
table(data$status)
data <- readRDS(file = "../Data/bladder_data.rds")
PlotMCFs(data = data, title = "Competing Risk", y_lim = c(0, 3), x_max = 60)
load("aumcf.RData")
fit_cr_aug
# Purpose: Analysis of bladder cancer recurrent events data.
# Created: 2020-12-09
# Updated: 2020-12-21
library(dplyr)
library(MCC) # devtools::install_github(repo = "zrmacc/MCC")
library(survival)
set.seed(2013)
# Format bladder data
data <- bladder1 %>%
dplyr::filter(treatment != "pyridoxine") %>%
dplyr::select("id", "stop", "status", "treatment", "size", "number") %>%
dplyr::rename(idx = id, time = stop) %>%
dplyr::mutate(arm = 1 * (treatment == "thiotepa")) %>%
dplyr::select(-"treatment")
data$status[data$status > 1] <- 2
# Death as within the event. No agumentation.
data_comp <- data
data_comp$status[data_comp$status > 1] <- 1
fit_comp_base <- MCC::CompareAUCs(
time = data_comp$time,
status = data_comp$status,
arm = data_comp$arm,
idx = data_comp$idx,
perm = TRUE,
boot = TRUE,
reps = 2000,
tau = 60
)
fit_comp_base <- MCC::CompareAUCs(
time = data_comp$time,
status = data_comp$status,
arm = data_comp$arm,
idx = data_comp$idx, tau = 60)
fit_comp_base
load("aumcf.RData")
fit_comp_base
fit_comp_aug <- MCC::CompareAUCs(
time = data_comp$time,
status = data_comp$status,
arm = data_comp$arm,
idx = data_comp$idx,
covar = data_comp %>% dplyr::select(c("size", "number")),tau=60)
fit_comp_aug
tapply(data_comp$status, data$idx, function(x){x[lenght(x)]})
tapply(data_comp$status, data$idx, function(x){x[length(x)]})
library(MCC)
sessionInfo()
library(dplyr)
library(survival)
# Format bladder data.
data <- bladder1 %>%
dplyr::filter(treatment != "pyridoxine" & stop > start) %>%
dplyr::select("id", "stop", "status", "treatment", "size", "number") %>%
dplyr::rename(idx = id, time = stop) %>%
dplyr::mutate(arm = 1 * (treatment == "thiotepa")) %>%
dplyr::select(-"treatment")
data$status[data$status > 1] <- 2
setwd("../Replication/")
library(dplyr)
library(survival)
# Format bladder data.
data <- bladder1 %>%
dplyr::filter(treatment != "pyridoxine" & stop > start) %>%
dplyr::select("id", "stop", "status", "treatment", "size", "number") %>%
dplyr::rename(idx = id, time = stop) %>%
dplyr::mutate(arm = 1 * (treatment == "thiotepa")) %>%
dplyr::select(-"treatment")
data$status[data$status > 1] <- 2
saveRDS(object = data, file = "Data/bladder_data.rds")
# Purpose: Testing power calculations.
library(Power)
beta_x <- 1
cov_xz <- 0.5
n <- 10
max_n <- 1e3
t1e <- 0.05
var_resid <- 1
var_x <- 1
var_z <- 1
PowerLinReg(
beta_x = beta_x,
cov_xz = cov_xz,
n = n,
t1e = 0.05,
var_resid = var_resid,
var_x = var_x,
var_z = var_z
)
# Purpose: Testing power calculations.
library(Power)
beta_x <- 1
cov_xz <- 0.5
n <- 10
max_n <- 1e3
t1e <- 0.05
var_resid <- 1
var_x <- 1
var_z <- 1
PowerLinReg(
beta_x = beta_x,
cov_xz = cov_xz,
n = n,
t1e = 0.05,
var_resid = var_resid,
var_x = var_x,
var_z = var_z
)
SampleSizeLinReg(
beta_x = beta_x,
cov_xz = cov_xz,
max_n = 20,
t1e = 0.05,
power = 0.80,
var_resid = var_resid,
var_x = var_x,
var_z = var_z
)
# Add library path
library(devtools)
library(roxygen2)
# Creates package
# usethis::create_package("Power")
setwd("~/Documents/Lab/Projects/Power/Power/")
# Generates RcppExports
# pkgbuild::compile_dll(force = TRUE)
## Documents package
document()
# Install
setwd("~/Documents/Lab/Projects/Power/")
devtools::install(
pkg = "Power",
reload = TRUE,
quick = TRUE,
upgrade = "never"
)
# Check package
# devtools::check()
SampleSizeLinReg(
beta_x = beta_x,
cov_xz = cov_xz,
max_n = 20,
t1e = 0.05,
power = 0.80,
var_resid = var_resid,
var_x = var_x,
var_z = var_z
)
# Purpose: Testing power calculations.
library(Power)
beta_x <- sqrt(0.05)
cov_xz <- 0.5
n <- 10
max_n <- 1e3
t1e <- 0.05
var_resid <- 1
var_x <- 1
var_z <- 1
PowerLinReg(
beta_x = beta_x,
cov_xz = cov_xz,
n = n,
t1e = 0.05,
var_resid = var_resid,
var_x = var_x,
var_z = var_z
)
SampleSizeLinReg(
beta_x = beta_x,
cov_xz = cov_xz,
max_n = 20,
t1e = 0.05,
power = 0.80,
var_resid = var_resid,
var_x = var_x,
var_z = var_z
)
SampleSizeLinReg(
beta_x = beta_x,
cov_xz = cov_xz,
max_n = 200,
t1e = 0.05,
power = 0.80,
var_resid = var_resid,
var_x = var_x,
var_z = var_z
)
SampleSizeLinReg(
beta_x = beta_x,
cov_xz = cov_xz,
max_n = 2000,
t1e = 0.05,
power = 0.80,
var_resid = var_resid,
var_x = var_x,
var_z = var_z
)
SampleSizeLinReg(
beta_x = beta_x,
cov_xz = cov_xz,
max_n = 1000,
t1e = 0.05,
power = 0.80,
var_resid = var_resid,
var_x = var_x,
var_z = var_z
)
